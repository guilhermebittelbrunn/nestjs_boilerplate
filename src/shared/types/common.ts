import { ApiProperty } from '@nestjs/swagger';

import UniqueEntityID from '../core/domain/UniqueEntityID';

class ServerResponseMetaPagination {
  @ApiProperty()
  total: number;

  @ApiProperty()
  pages: number;

  @ApiProperty()
  page: number;

  @ApiProperty()
  limit: number;

  @ApiProperty()
  hasNextPage: boolean;
}

type ServerResponse<TData, TMeta extends Record<string, any> | undefined = undefined> = {
  data: TData;
  meta?: TMeta;
};

interface ServerResponseError {
  error: string;
  message: string;
  statusCode: number;
}

export class UpdateResponseDTO {
  @ApiProperty()
  id: string;
}

export class ListResponseDTO<T> {
  @ApiProperty({ isArray: true })
  data: T[];

  @ApiProperty()
  meta: ServerResponseMetaPagination;
}

export type UpdateFields<T> = {
  [P in keyof T]?: T[P];
} & {
  id: UniqueEntityID;
};

export type DeepPartial<T> = {
  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];
};

export type PartialAutoGenerated<T> = Omit<T, 'id' | 'deleted' | 'createdAt' | 'updatedAt' | 'enabled'> & {
  id?: string;
  createdAt?: Date;
  updatedAt?: Date;
  deleted?: boolean;
  enabled?: boolean;
};

export type UpdateDTO<T> = {
  [P in keyof T]?: T[P] extends Record<any, any> ? Partial<T[P]> : T[P];
} & {
  id: string;
};

export type AllOptional<T> = {
  [P in keyof T]?: T[P] | undefined;
};

export type RawID = string;

export type GenericId = RawID | UniqueEntityID;

export type { ServerResponse, ServerResponseMetaPagination, ServerResponseError };
